import json
import os
import requests

from accounts.daos import google_dao
from accounts import utils as act_utils


GOOGLE_OAUTH_SCOPE = 'https://www.googleapis.com/auth/userinfo.email'
GOOGLE_OAUTH2_API = 'https://accounts.google.com/o/oauth2/auth'
GOOGLE_OAUTH2_TOKEN_API = 'https://oauth2.googleapis.com/token'
GOOGLE_OAUTH2_USER_PROFILE_API = 'https://www.googleapis.com/oauth2/v1/userinfo'
GRANT_TYPE='authorization_code'
RESPONSE_TYPE='code'
REQUEST_TYPES = ('get_authorization_code', 'get_access_token', 'get_user_profile')


class GoogleOnboarding:
    gr_dao = google_dao.GoogleRequestDAO
    sp_dao = google_dao.SocialProfileDAO

    def __init__(self) -> None:
        self.client_id = os.getenv('GOOGLE_CLIENT_ID')
        self.secret_key = os.getenv('GOOGLE_SECRET_KEY')
        self.redirect_uri = os.getenv('GOOGLE_OAUTH2_REDIRECT_URI')
    
    def make_request(self, request_type, method, **kwargs):
        if request_type not in REQUEST_TYPES:
            raise Exception('Invalid action')
        request_url, request_params = getattr(self, f'{request_type}_params')(**kwargs)
        return getattr(requests, method)(url=request_url, params=request_params)
    
    def get_authorization_code_params(self, **kwargs):
        state = act_utils.generate_state()
        self.gr_dao.create_obj({
            'state': state,
            'is_active': True
        })
        return GOOGLE_OAUTH2_API, {
            'response_type': RESPONSE_TYPE,
            'client_id': self.client_id,
            'redirect_uri': self.redirect_uri,
            'state': state,
            'scope': GOOGLE_OAUTH_SCOPE,
        }

    def get_access_token_params(self, **kwargs):
        # verify if the request is generated by our system
        state = kwargs['state']

        req_obj = self.gr_dao.get_or_create_obj(**{
            'state': state,
            'is_active': True
        })
        if not req_obj:
            raise Exception('Invalid request')

        self.gr_dao.update_obj(**{
            'filters': {
                'state': state,
                'is_active': True
            },
            'updates': {
                'is_active': False
            }
        })

        return GOOGLE_OAUTH2_TOKEN_API, {
            'code': kwargs['authorization_code'],
            'grant_type': GRANT_TYPE,
            'redirect_uri': self.redirect_uri,
            'client_id': self.client_id,
            'client_secret': self.secret_key,
        }

    def get_user_profile_params(self, **kwargs):
        return GOOGLE_OAUTH2_USER_PROFILE_API, {
            'access_token': kwargs['access_token'],
        }

    def onboard_user(self, authorization_code, state):
        access_token = self.make_request(
            'get_access_token', 
            'post', 
            **{
                'authorization_code': authorization_code,
                'state': state
            }
        )
        access_token = json.loads(access_token.content)['access_token']
        google_user_profile_request = self.make_request(
            'get_user_profile',
            'get',
            **{
                'access_token': access_token
            }
        ).content
        profile_data = json.loads(google_user_profile_request)
        self.sp_dao.get_or_create_obj(
            **{
                'type': 'google',
                'account_id': profile_data['id'],
                'email': profile_data['email'],
            }
        )
        self.sp_dao.update_obj(
            **{
                'filters': {
                    'type': 'google',
                    'email': profile_data['email'],
                },
                'updates': {
                    'is_verified': profile_data['verified_email']
                }
            }
        )
        return profile_data
